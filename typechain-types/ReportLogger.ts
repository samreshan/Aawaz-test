/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ReportLoggerInterface extends Interface {
  getFunction(
    nameOrSignature: "createReport" | "getReport" | "getReportCount" | "reports"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ReportCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createReport",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
}

export namespace ReportCreatedEvent {
  export type InputTuple = [id: BigNumberish, title: string, user: AddressLike];
  export type OutputTuple = [id: bigint, title: string, user: string];
  export interface OutputObject {
    id: bigint;
    title: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReportLogger extends BaseContract {
  connect(runner?: ContractRunner | null): ReportLogger;
  waitForDeployment(): Promise<this>;

  interface: ReportLoggerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createReport: TypedContractMethod<
    [_title: string, _description: string, _coords: string, _photo: string],
    [void],
    "nonpayable"
  >;

  getReport: TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        coords: string;
        photo: string;
        timestamp: bigint;
        user: string;
      }
    ],
    "view"
  >;

  getReportCount: TypedContractMethod<[], [bigint], "view">;

  reports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        coords: string;
        photo: string;
        timestamp: bigint;
        user: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createReport"
  ): TypedContractMethod<
    [_title: string, _description: string, _coords: string, _photo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReport"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        coords: string;
        photo: string;
        timestamp: bigint;
        user: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReportCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        coords: string;
        photo: string;
        timestamp: bigint;
        user: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ReportCreated"
  ): TypedContractEvent<
    ReportCreatedEvent.InputTuple,
    ReportCreatedEvent.OutputTuple,
    ReportCreatedEvent.OutputObject
  >;

  filters: {
    "ReportCreated(uint256,string,address)": TypedContractEvent<
      ReportCreatedEvent.InputTuple,
      ReportCreatedEvent.OutputTuple,
      ReportCreatedEvent.OutputObject
    >;
    ReportCreated: TypedContractEvent<
      ReportCreatedEvent.InputTuple,
      ReportCreatedEvent.OutputTuple,
      ReportCreatedEvent.OutputObject
    >;
  };
}
